clear
pathName = '/BIVARIATE DATA';
fileName = '/group6_train.txt';
newString = strcat(pathName,fileName);
trainDataFull = load(newString);
trainData = trainDataFull(:,1:2);
trainDataTarget  = trainDataFull(:,3);
clearvars trainDataFull;
%[5 9] for train with 2000
%
fileName = '/group6_val.txt';
newString = strcat(pathName,fileName);
valDataFull = load(newString);
valData = valDataFull(:,1:2);
valDataTarget  = valDataFull(:,3);
clearvars valDataFull;

fileName = '/group6_test.txt';
newString = strcat(pathName,fileName);
testDataFull = load(newString);
testData = testDataFull(:,1:2);
testDataTarget  = testDataFull(:,3);
clearvars testDataFull;

input = [trainData;valData;testData];
target = [trainDataTarget;valDataTarget;testDataTarget];
save input.mat
save target.mat

%disp('trainRatio');
trainRatio = (size(trainData,1))/(size(trainData,1) + size(valData,1)+size(testData,1));

%disp('valRatio');
valRatio = (size(valData,1))/(size(trainData,1) + size(valData,1)+size(testData,1));

%disp('testRatio');
testRatio = (size(testData,1))/(size(trainData,1) + size(valData,1)+size(testData,1));

% Solve an Input-Output Fitting problem with a Neural net{i}work
% Script generated by Neural Fitting app
% Created Mon Feb 15 19:33:44 IST 2016
%
% This script assumes these variables are defined:
%
%   input - input data.
%   target - target data.

x = input';
t = target';

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. NFTOOL falls back to this in low memory situations.
trainFcn = 'trainlm';  % Levenberg-Marquardt

% Create a Fitting net{i}work

hiddenLayer1 = [1,3,3,5,8,10,15,10,6,6];
hiddenLayer2 = [3,1,3,9,4,10,12,17,20,10];
net = cell(size(hiddenLayer1));
trainPerformance = zeros(size(hiddenLayer1));
valPerformance = zeros(size(hiddenLayer1));
testPerformance = zeros(size(hiddenLayer1));



    minError = Inf;
    minIndex = -1;
for i = 1 : size(hiddenLayer1,2)
    
    hiddenLayers = [hiddenLayer1(i),hiddenLayer2(i)];
    %net = feedforwardnet(hiddenLayers,trainFcn);
    net = fitnet(hiddenLayers,trainFcn);
    % Setup Division of Data for Training, Validation, Testing
    net.divideFcn = 'divideind';
    net.divideParam.trainInd = 1 :2000;
    net.divideParam.valInd = 2001:2300;
    net.divideParam.testInd = 2301:2500;
    
    net.performFcn = 'mse';  % Mean squared error
    
    % Choose Plot Functions
    % For a list of all plot functions type: help nnplot
   % net.plotFcns = {'plotperform','plottrainstate','ploterrhist', ...
     %   'plotregression', 'plotfit'};
    % Train the net{i}work
    net.divideFcn = 'divideint';
    net.trainParam.epochs = 2000;
    [net,tr] = train(net,x,t);
    
    % Test the net{i}work
    modelOutput = net(x);
    % e = gsubtract(t,y);
    modelOutTrain = modelOutput(tr.trainInd);
    modelOutVal = modelOutput(tr.valInd);
    modelOutTest = modelOutput(tr.testInd);
    
     valPerformance(i) = perform(net,t(tr.valInd),modelOutVal);
     trainPerformance(i) = perform(net,t(tr.trainInd),modelOutTrain);
     testPerformance(i) = perform(net,t(tr.testInd),modelOutTest);
%     
%     performance = perform(net,t,modelOutput);
%     error = t - modelOutput;
%     error = error.*error;
%     err = sum(error)/size(error,2);
    
    if valPerformance(i) < minError
        minError = valPerformance(i);
        minIndex = i;
        bestNet = net;
     end
   
    
    % View the net{i}work
    
    
    % Plotss
    % Uncomment these lines to enable various plots.
    %figure, plotperform(tr)
    %figure, plottrainstate(tr)
    %figure, plotfit(net{i},x,t)
    %figure, plotregression(t,y)
    %figure, ploterrhist(e)




end
view(bestNet)  %to view the best network
% ep = bestNet.trainParam.epochs;
% 
% filetoBeSaved = 'trainingLM.txt';
% fID = fopen(filetoBeSaved,'a');
% format = 'number Of Layers in first hidden layer is %d\r\n'
% h1 =  hiddenLayer1(minIndex);
% fprintf(fID,format,hiddenLayer1(minIndex));
% format = 'number Of Layers in second hidden layer is %d\r\n'
% h2 = hiddenLayer2(minIndex);
% fprintf(fID,format,hiddenLayer2(minIndex));
% format = 'minVal error is %5.4f\r\n'
% valPerformance(minIndex);
% fprintf(fID,format,valPerformance(minIndex));
% 
% 
% fclose('all');
h = figure;
hold on;
plot([1:size(hiddenLayer1,2)],trainPerformance,'r');
plot([1:size(hiddenLayer1,2)],valPerformance,'g');
plot([1:size(hiddenLayer1,2)],testPerformance,'b');
ylabel('MSError');
xlabel('Index of various Hidden layer Configuration');
legend('Train Data','Validation Data','Test Data');
%     saveas(h, ['MSE_trainLM h1' num2str(h1) ' h2' num2str(h2) ' iter ' num2str(iter) '.jpg']);
%     saveas(h, ['MSE_trainLM h1' num2str(h1) ' h2' num2str(h2) ' iter ' num2str(iter) '.fig']); 
%    close(h); 
%    h =  figure;
% targetTrain = [trainData trainDataTarget];
% modelOutput = bestNet(trainData');
% 
% scatter3(targetTrain(:,1),targetTrain(:,2),targetTrain(:,3),15,[0 1 0],'filled');
% hold on;
% scatter3(targetTrain(:,1),targetTrain(:,2),modelOutput',30,[1 0 0],'filled');
% title('Model output vs Target output for TRAIN data ');
% 
% legend('Target Output','Model Output');
% xlabel('Input variable x1');
% ylabel('Input variable x2');
% zlabel('Output');
% 
% view([-35,35]);
% saveas(h, ['modVStarTrain h1 '  num2str(h1) ' h2' num2str(h2) ' iter ' num2str(iter) '.jpg']);
%     saveas(h, ['modVStarTrain h1 '  num2str(h1) ' h2' num2str(h2) ' iter ' num2str(iter) '.fig']); 
% hold off;
% close(h);
% 
% h =  figure;
% valTrain = [valData valDataTarget];
% modelOutput = bestNet(valData');
% 
% scatter3(valTrain(:,1),valTrain(:,2),valTrain(:,3),15,[0 1 0],'filled');
% hold on;
% scatter3(valTrain(:,1),valTrain(:,2),modelOutput',30,[1 0 0],'filled');
% title('Model output vs Target output for VALIDATION data ');
% 
% legend('Target Output','Model Output');
% xlabel('Input variable x1');
% ylabel('Input variable x2');
% zlabel('Output');
% 
% view([-35,35]);
% saveas(h, ['modVStarVal h1 '  num2str(h1) ' h2' num2str(h2) ' iter ' num2str(iter) '.jpg']);
%     saveas(h, ['modVStarVal h1 '  num2str(h1) ' h2' num2str(h2) ' iter ' num2str(iter) '.fig']); 
% hold off;
% close(h);
% 
% h =  figure;
% testTrain = [testData testDataTarget];
% modelOutput = bestNet(testData');
% 
% scatter3(testTrain(:,1),testTrain(:,2),testTrain(:,3),15,[0 1 0],'filled');
% hold on;
% scatter3(testTrain(:,1),testTrain(:,2),modelOutput',30,[1 0 0],'filled');
% title('Model output vs Target output for TEST data ');
% 
% legend('Target Output','Model Output');
% xlabel('Input variable x1');
% ylabel('Input variable x2');
% zlabel('Output');
% 
% view([-35,35]);
% saveas(h, ['modVStarTest h1 '  num2str(h1) ' h2' num2str(h2) ' iter' num2str(iter) '.jpg']);
%     saveas(h, ['modVStarTest h1 '  num2str(h1) ' h2' num2str(h2) ' iter' num2str(iter) '.fig']); 
% hold off;
% close(h);

   
